                              1.Array.of()
                                      
Name: Vaishnavi M J 

Array.of()
          The Array.of() method is a generic factory method. The Array.of() static method creates a new Array instance from a variable number of arguments, regardless of number or type of the arguments.The difference between Array.of() and the Array() constructor is in the handling of single arguments: Array.of(7) creates an array with a single element, 7, whereas Array(7) creates an empty array with a length property of 7.  
Example: 
Array.of(1); // [1]
Array.of(1, 2, 3); // [1, 2, 3]
Array.of(undefined); // [undefined]

Name: Mahima K

Array.of()
     The Array.of() method is similar to the Array constructor except the Array.of() method does not treat a single numeric value special
     Syntax:
       Array.of(element1, element2,.... elementN)
    Example:
       Array.of(1, 2, 3)  //[1, 2, 3]
       Array.of("Abi")   //[Abi]
    Return Value:
       It return the array value;

Name: Jemisha F

Array.of()
          When the of() method is used it creates a new array with the given arguments. 
     eg1:   let numbers = Array.of(3);

            console.log(numbers);      // [ 3 ]
     eg2:   let fruits = Array.of("Avocado", "Banana", "Cranberry");

            console.log(fruits); // [ 'Avocado', 'Banana', 'Cranberry' ]

                           
                             
                            2.Array of prototype.pop()

Name: Vaishnavi M J 

 Array of prototype.pop()
          The pop() method removes the last element from an array and returns that element. This method changes the length of the array.If you call pop() on an empty array, it returns undefined.
 Example:
 const myFish = ["angel", "clown", "mandarin", "sturgeon"];

const popped = myFish.pop();

console.log(myFish); // ['angel', 'clown', 'mandarin' ]

console.log(popped); // 'sturgeon'

Name:Mahima K

Array.prototype.pop()
    The pop() method removes the last element of an array.
    The pop() method changes the original array.
    The pop() return the removed element.
    Syntax:
       pop()
    Example:
       const count = [10, 20, 30];
       const total = count.pop();
       console.log(count);   //[10, 20]
       console.log(total);  //30
    Return Value:
       It return removed element.

Name: Jemisha F

Array.prototype.pop()
         When the pop() method is used it removes the last element from the array.
     eg:    const fruits = ['Avocado', 'Banana', 'Cranberry', 'Dragon Fruit'];

            console.log(fruits); // [ "Avocado", "Banana", "Cranberry" ]


                                3.Array of prototype.push()

Name: Vaishnavi M J 

 Array of prototype.push()
          The push() method adds one or more elements to the end of an array and returns the new length of the array.
 Example:
 const sports = ["soccer", "baseball"];
const total = sports.push("football", "swimming");

console.log(sports); // ['soccer', 'baseball', 'football', 'swimming']
console.log(total); // 4

Name: Mahima K

Array.prototype.push()
     The push() method adds new items to the end of an array.
     The push() method change the length of an array.
     It is similar to the unshift() method. 
     But unshift() method adds the element at the start of the array whereas push() adds the element at the end of the array.
     Syntax:
        push(element1, element2,.... elementN)
    Example:
        const fruits = ["Apple", "Banana", "Mango"];
        const all = fruits.push("Orange", "Grapes");
        console.log(fruits);   //["Apple", "Banana", "Mango", "Orange", "Grapes"]
        console.log(all);     //5
    Return Value:
        It return the array length.

Name: Jemisha F

Array.prototype.push()
          When the push() method is used it adds one ore more elements to the end of the array.
     eg:    const fruits = ['Avocado', 'Banana', 'Cranberry']

            const count = fruits.push('Cranberry'); // ['Avocado', 'Banana', 'Cranberry', 'Dragon Fruit']


                                4.Array of filter()

Name: Vaishnavi M J 

 Array of filter()
          The filter() method creates a shallow copy of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.
Example:
function isBigEnough(value) {
  return value >= 10;
}

const filtered = [12, 5, 8, 130, 44].filter(isBigEnough);
// filtered is [12, 130, 44]

Name: Mahima K

Array.prototype.filter()
    The filter() method creates a new array filled with element that pass a test provided by a function.
    The filter() method does not execute the function for empty elements.
    The filter() method does not change the original Array.
    Syntax:
      Arrow function:
          filter((element, index, array) => {/*..*/})
      Callback function:
          filter(callbackFunction, thisArg)
      Inline Callback function:
          filter(function(element, index, array) => {/*..*/}, thisArg)
    Example:
        const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
        function isPrime(prime)
        {
            for(let i = 2; prime > i; i++)
            {
                if(prime % i === 0)
                {
                    return false;
                }
            }
            return num > 1;
        }
        console.log(numbers.filter(isPrime));   //[2, 3, 5, 7, 11, 13]


Name: Jemisha F

Array.prototype.filter()
          The filter() method is used to filter down the elements that satisfy the condition.
      eg: const numbers = [1,2,3,4,5];
          let evenNumbers = numbers.filter(function (value){
               return value % 2 == 0;
           } );
          let oddNumbers = numbers.filter(function (value){
               return value % 2 == 0;  
            });
           console.log( "Even Numbers" , evenNumbers); // Even Numbers = (2) [2,4]
           console.log( "Odd Numbers" , oddNumbers); // Odd Numbers = (3)  [1,3,5]