1.Array of()
          The Array.of() method is a generic factory method. The Array.of() static method creates a new Array instance from a variable number of arguments, regardless of number or type of the arguments.The difference between Array.of() and the Array() constructor is in the handling of single arguments: Array.of(7) creates an array with a single element, 7, whereas Array(7) creates an empty array with a length property of 7.  
Example: 
Array.of(1); // [1]
Array.of(1, 2, 3); // [1, 2, 3]
Array.of(undefined); // [undefined]



2.Array of prototype.pop()
          The pop() method removes the last element from an array and returns that element. This method changes the length of the array.If you call pop() on an empty array, it returns undefined.
 Example:
 const myFish = ["angel", "clown", "mandarin", "sturgeon"];

const popped = myFish.pop();

console.log(myFish); // ['angel', 'clown', 'mandarin' ]

console.log(popped); // 'sturgeon'



3.Array of prototype.push()
          The push() method adds one or more elements to the end of an array and returns the new length of the array.
 Example:
 const sports = ["soccer", "baseball"];
const total = sports.push("football", "swimming");

console.log(sports); // ['soccer', 'baseball', 'football', 'swimming']
console.log(total); // 4



4.Array of filter()
          The filter() method creates a shallow copy of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.
Example:
function isBigEnough(value) {
  return value >= 10;
}

const filtered = [12, 5, 8, 130, 44].filter(isBigEnough);
// filtered is [12, 130, 44]