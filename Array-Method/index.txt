

1.ArrayOf()
    Array.of() is a static method that creates a new array instance with a variable number of elements. 
    It is similar to the Array() constructor, but with a few key differences.
        Syntax:
        Array.of(element0)
        Array.of(element0, element1

        const myArray = Array.of(1, 2, 3, 'four', 'five', [6, 7]);
        console.log(myArray);
    
        Output: [1, 2, 3, "four", "five", [6, 7]]
 
     One difference between Array() and Array.of() is in how they handle single numeric arguments. With Array(), 
     a single numeric argument will create an array with the length of that argument. With Array.of(), a single numeric argument will create an array with a single element that has the value of that argument. 
     Here's an example to illustrate the difference.
     
        const array1 = Array(3);      // Creates an array with length 3
        console.log(array1);         // Output: [empty x 3]

        const array2 = Array.of(3);   // Creates an array with a single element of value 3
        console.log(array2);         // Output: [3]


2. Array.prototype.push()
    The push() method adds one or more elements to the end of an array and returns the new length of the array.
       syntax: push(element);
 
   1. adding elements to an array
 
        const animals = ['pigs', 'goats', 'sheep'];
        animals.push('chickens', 'cats', 'dogs');
        console.log(animals);

        Output:["pigs", "goats", "sheep", "cows", "chickens", "cats", "dogs"]

   2.merging two arrays
        const vegetables = ["parsnip", "potato"];
        const moreVegs = ["celery", "beetroot"];
        vegetables.push(moreVegs);
        console.log(vegetables);

        Output: ['parsnip', 'potato', 'celery', 'beetroot']

3.Array.prototype.pop()
     The pop() method removes the last element from an array and returns that element. This method changes the length of the array.
     Syntax: pop();

       const plants = ['broccoli', 'cauliflower', 'cabbage', 'kale', 'tomato'];
       plants.pop();
       console.log(plants);
    
       Output:["broccoli", "cauliflower", "cabbage"]

4.Array.prototype.filter()
     The filter() method creates a new array filled with elements that pass a test provided by a function.
     
     example:
       const ages = [32, 33, 16, 40];
       const result = ages.filter(checkAdult);

       function checkAdult(age) {
       return age >= 18;
       }